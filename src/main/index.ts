import ConfigService from '@main/services/ConfigService';
import DialogService from '@main/services/DialogService';
import { AppConfig } from '@mytypes/config';
import { app, BrowserWindow, ipcMain, IpcMainInvokeEvent } from 'electron';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
	app.quit();
}

const createWindow = (): void => {
	// Create the browser window.
	const mainWindow = new BrowserWindow({
		height: 600,
		width: 800,
		autoHideMenuBar: process.env.NODE_ENV === 'production',
		webPreferences: {
			preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
		},
	});

	// and load the index.html of the app.
	mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

	// Open the DevTools.
	process.env.NODE_ENV === 'development'
		? mainWindow.webContents.openDevTools()
		: null;
};

const dialogService = DialogService.getInstance();
const configService = ConfigService.getInstance();

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
	if (process.platform !== 'darwin') {
		app.quit();
	}
});

app.on('activate', () => {
	// On OS X it's common to re-create a window in the app when the
	// dock icon is clicked and there are no other windows open.
	if (BrowserWindow.getAllWindows().length === 0) {
		createWindow();
	}
});


ipcMain.handle('dialog:import-books', async (event: IpcMainInvokeEvent) => {
	const browserWindow = BrowserWindow.fromWebContents(event.sender);
	if (!browserWindow) {
		throw new Error('BrowserWindow not found');
	}
	return dialogService.importBooks(browserWindow);
});

ipcMain.handle('dialog:import-folder', async (event: IpcMainInvokeEvent) => {
	const browserWindow = BrowserWindow.fromWebContents(event.sender);
	if (!browserWindow) {
		throw new Error('BrowserWindow not found');
	}
	return dialogService.importFolder(browserWindow);
});

ipcMain.handle(
	'config:get',
	async (event: IpcMainInvokeEvent, key: keyof AppConfig) => {
		return configService.get(key);
	},
);

ipcMain.handle(
	'config:set',
	async <Key extends keyof AppConfig>(
		event: IpcMainInvokeEvent,
		key: Key,
		value: AppConfig[Key],
	) => {
		configService.set(key, value);
	},
);
